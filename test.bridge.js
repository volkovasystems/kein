"use strict";

/*;
	@test-license:
		The MIT License (MIT)
		@mit-license

		Copyright (@c) 2017 Richeve Siodina Bebedor
		@email: richeve.bebedor@gmail.com

		Permission is hereby granted, free of charge, to any person obtaining a copy
		of this software and associated documentation files (the "Software"), to deal
		in the Software without restriction, including without limitation the rights
		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
		copies of the Software, and to permit persons to whom the Software is
		furnished to do so, subject to the following conditions:

		The above copyright notice and this permission notice shall be included in all
		copies or substantial portions of the Software.

		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
		SOFTWARE.
	@end-test-license

	@test-configuration:
		{
			"package": "kein",
			"path": "kein/test.module.js",
			"file": "test.module.js",
			"module": "test",
			"author": "Richeve S. Bebedor",
			"eMail": "richeve.bebedor@gmail.com",
			"contributors": [
				"John Lenon Maghanoy <johnlenonmaghanoy@gmail.com>"
			],
			"repository": "https://github.com/volkovasystems/kein.git"
		}
	@end-test-configuration

	@test-documentation:

	@end-test-documentation

	@include:
		{
			"assert": "should/as-function",
			"kein": "kein",
			"path": "path"
		}
	@end-include
*/

var assert=require("should/as-function");





//: @bridge:
var path=require("path");
//: @end-bridge





//: @bridge:
describe("kein",function(){

var bridgeURL="file://"+path.resolve(__dirname,"bridge.html");

describe("`kein( 'toString', NaN )`",function(){
it("should be equal to true",function(){

var result=browser.url(bridgeURL).execute(

function(){
return kein("toString",NaN);
}).

value;

assert.equal(result,true);
});
});

describe("`kein( 'toString', undefined )`",function(){
it("should be equal to true",function(){

var result=browser.url(bridgeURL).execute(

function(){
return kein("toString",undefined);
}).

value;

assert.equal(result,true);
});
});

describe("`kein( 'toString', 123 )`",function(){
it("should be equal to true",function(){

var result=browser.url(bridgeURL).execute(

function(){
return kein("toString",123);
}).

value;

assert.equal(result,true);
});
});

describe("`kein( 'toString', ( ) => { } )`",function(){
it("should be equal to true",function(){
//: @ignore:
			let result = browser.url( bridgeURL ).execute(

				function( ){
					return kein( "toString", ( ) => { } );
				}

			).value;
			//: @end-ignore

assert.equal(result,true);
});
});

describe("`kein( 1, [ 1, 2, 3 ] )`",function(){
it("should be equal to true",function(){
var result=browser.url(bridgeURL).execute(

function(){
return kein(1,[1,2,3]);
}).

value;

assert.equal(result,true);

});
});

describe("`kein( Symbol.for( 'property' ), { [ Symbol.for( 'property' ) ]: 'value' } )`",function(){
it("should be equal to true",function(){
//: @ignore:
			let result = browser.url( bridgeURL ).execute(

				function( ){
					return kein( Symbol.for( "property" ), { [ Symbol.for( "property" ) ]: "value" } );
				}

			).value;
			//: @end-ignore

assert.equal(result,true);
});
});

describe("`kein with symbol type as key and function as entity`",function(){
it("should be equal to true",function(){
//: @ignore:
			let result = browser.url( bridgeURL ).execute(

				function( ){
					let Hello = function Hello( ){ };
					Hello[ Symbol.for( "extensive" ) ] = Symbol.for( "extensive" );

					return kein( Symbol.for( "extensive" ), Hello );
				}

			).value;
			//: @end-ignore

assert.equal(result,true);
});
});

describe("`kein( 'property', { 'property': 'value' } )`",function(){
it("should be equal to true",function(){
var result=browser.url(bridgeURL).execute(

function(){
return kein("property",{"property":"value"});
}).

value;

assert.equal(result,true);
});
});


describe("`kein( 'toString', Infinity )`",function(){
it("should be equal to true",function(){
var result=browser.url(bridgeURL).execute(

function(){
return kein("toString",Infinity);
}).

value;

assert.equal(result,true);

});
});


describe("`kein( 'toString', true )`",function(){
it("should be equal to true",function(){
var result=browser.url(bridgeURL).execute(

function(){
return kein("toString",true);
}).

value;

assert.equal(result,true);

});
});

describe("`kein( 'toString', Array )`",function(){
it("should be equal to true",function(){
var result=browser.url(bridgeURL).execute(

function(){
return kein("toString",Array);
}).

value;

assert.equal(result,true);

});
});

describe("`kein( 'toString', 'helloworld' )`",function(){
it("should be equal to true",function(){
var result=browser.url(bridgeURL).execute(

function(){
return kein("toString","helloworld");
}).

value;

assert.equal(result,true);

});
});

describe("`kein( 'toString', Symbol.for( 'hi' ) )`",function(){
it("should be equal to true",function(){
//: @ignore:
			let result = browser.url( bridgeURL ).execute(

				function( ){
					return kein( "toString", Symbol.for( "hi" ) );
				}

			).value;
			//: @end-ignore
assert.equal(result,true);

});
});

describe("`kein( 'length', [ 1, 2, 3 ] )`",function(){
it("should be equal to true",function(){
var result=browser.url(bridgeURL).execute(

function(){
return kein("length",[1,2,3]);
}).

value;

assert.equal(result,true);

});
});

describe("`kein( 'name', function yeah( ){ } )`",function(){
it("should be equal to true",function(){
var result=browser.url(bridgeURL).execute(

function(){
return kein("name",function yeah(){});
}).

value;

assert.equal(result,true);

});
});

describe("`kein with class instance`",function(){
it("should be equal to true",function(){
//: @ignore:
			let result = browser.url( bridgeURL ).execute(

				function( ){

					class Orange {
						constructor( ){
							this.color = "orange";
						}
						getColor( ){
							return "orange";
						}
					}

					let orange = new Orange( );

					return kein( "constructor", orange );

				}

			).value;
			//: @end-ignore
assert.equal(result,true);

});
});

describe("`kein( 'property', { } )`",function(){
it("should be equal to false",function(){
var result=browser.url(bridgeURL).execute(

function(){
return kein("property",{});
}).

value;

assert.equal(result,false);

});
});

});
//: @end-bridge
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=test.bridge.js.map
